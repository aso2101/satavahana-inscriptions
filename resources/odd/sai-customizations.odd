<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://jenkins.tei-c.org/job/TEIP5/lastSuccessfulBuild/artifact/P5/release/xml/tei/odd/p5.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
<teiHeader>
  <fileDesc>
    <titleStmt>
      <title>ODD for extensions to EIAD-PYU for Sātavāhana Inscriptions</title>
    </titleStmt>
    <publicationStmt>
      <p>Extends hisoma.epigraphy.odd, which contains Emmanuelle Morlock's EIAD-PYU ODD for the project
        "From Vijayapurī to Śrīkṣetra." This document will contain any alternative behaviors
        that we want for the "Sātavāhana Inscriptions" project.</p>
    </publicationStmt>
    <sourceDesc>
      <p>Created by Andrew Ollett</p>
    </sourceDesc>
  </fileDesc>
</teiHeader>
<text>
  <body>
    <schemaSpec start="TEI teiCorpus" source="hisoma-epigraphy.odd" ident="sai-customizations">
				<!-- ==== biblStruct ==== -->
				<elementSpec mode="change" ident="biblStruct">
				    <model behaviour="block">
					<modelSequence>
						<modelSequence>
							<model behaviour="inline">
								<model predicate=".//title[@type='short']" behaviour="bibl-link">
									<param name="content" value=".//title[@type='short']"/>
									<param name="id">@xml:id</param>
									<outputRendition> font-weight:bold; font-style:normal; color: #f6a623; </outputRendition>
									<outputRendition scope="after"> content:"\a"; white-space:pre; </outputRendition>
								</model>
								<modelSequence behaviour="inline">
									<modelGrp>
										<model predicate=".//author/surname" behaviour="inline">
											<param name="content">.//author/surname</param>
										</model>
										<model predicate=".//author/name" behaviour="inline">
											<param name="content">.//author/name</param>
										</model>
									</modelGrp>
									<model behaviour="text">
										<param name="content">' '</param>
									</model>
									<model behaviour="inline">
										<param name="content">monogr/imprint/date</param>
									</model>
								</modelSequence>
								<outputRendition>font-weight:bold;</outputRendition>
							</model>
						</modelSequence>
						<modelSequence behaviour="block">
							<modelGrp>
								<!-- case 1 -->
								<modelSequence predicate="@type='journalArticle' or @type='bookSection' or @type='encyclopediaArticle'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">analytic/author</param>
									</model>
									<!-- title article -->
									<modelGrp>
										<modelSequence predicate="analytic/title[@level='a']">
											<model behaviour="inline">
												<param name="content">analytic/title[@level='a']</param>
												<outputRendition scope="before">content:'“'; </outputRendition>
												<outputRendition scope="after">content:'”'; </outputRendition>
											</model>
											<model behaviour="text">
												<param name="content">', '</param>
											</model>
										</modelSequence>
										<modelSequence predicate="not(analytic/title[@level='a']) and relatedItem[@type='reviewOf']">
											<!--<model behaviour="text">
												<param name="content">'review of '</param>
											</model>-->
											<model behaviour="link">
												<param name="content">relatedItem/ref</param>
												<desc>When it is a review of another bibliographic entry: so there's is no analytic/title[@level='a'].</desc>
											</model>
											<model behaviour="text">
												<param name="content">', '</param>
											</model>
										</modelSequence>
									</modelGrp>
									<!-- if bookSection  or encyclopediaArticle-->
									<modelSequence predicate="@type='bookSection' or @type='encyclopediaArticle'">
										<model predicate="@type='bookSection' or @type='encyclopediaArticle'" behaviour="text">
											<param name="content">'in '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/title[@level='m']</param>
										</model>
										<model behaviour="text">
											<param name="content">', '</param>
										</model>
										<model predicate="monogr/author" behaviour="text">
											<param name="content">'by '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/author</param>
											<!--<outputRendition>color:pink;</outputRendition>-->
										</model>
										<model predicate="monogr/editor" behaviour="inline">
											<param name="content">monogr/editor</param>
											<outputRendition scope="before">content:'ed. by '</outputRendition>
										</model>
										<!--<model predicate="monogr/editor/forename" behaviour="inline">
											<param name="content">monogr/editor/forename</param>
											<outputRendition>color:red;</outputRendition>
										</model>
										<model predicate="monogr/editor/surname" behaviour="inline">
											<param name="content">' '</param>
										</model>
										<model predicate="monogr/editor/surname" behaviour="inline">
											<param name="content">monogr/editor/surname</param>
											
										</model>
										<model predicate="monogr/editor/name" behaviour="inline">
											<param name="content">monogr/editor/name</param>
										</model>
										<model predicate="monogr/editor" behaviour="text">
											<param name="content">', '</param>
										</model>-->
									</modelSequence>
									<!-- if journal article  -->
									<modelSequence predicate="@type='journalArticle'">
										<model behaviour="inline">
											<param name="content">monogr/title[@level='j']</param>
											<!-- <outputRendition>font-style:italic;</outputRendition>-->
										</model>
										<model behaviour="text">
											<param name="content">', '</param>
										</model>
									</modelSequence>
									<!-- series  -->
								<model predicate=".//series" behaviour="inline">
										<param name="content">series</param>
										
										</model>
									<!-- !!! warning !!! biblScope specificity in eiad (follows tei.js) !!!! -->
									<!-- volume  -->
									<!--<model predicate=".//monogr/biblScope[@unit='volume']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='volume']</param>
									</model>-->
									<!-- issue  -->
									<!--<model predicate=".//monogr/biblScope[@unit='issue']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='issue']</param>
									</model>-->
									<!-- imprint  -->
									<model predicate=".//monogr/imprint" behaviour="inline">
										<param name="content">monogr/imprint</param>
										<!--											<outputRendition>color:blue;</outputRendition>-->
									</model>
									<!-- pages  -->
									<!-- see imprint	-->
									<!--<model predicate=".//monogr/imprint/biblScope[@unit='page']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='page']</param>
										<outputRendition scope="before">content: ': ';</outputRendition>
										<outputRendition>color:red;</outputRendition>
									</model>-->
									<!-- note  -->
									<!--<modelSequence predicate=".//note">
										<model predicate="./note" behaviour="inline">
											<param name="content">./note</param>
											<outputRendition>color:orange; </outputRendition>
										</model>
										<model predicate=".//imprint/note" behaviour="inline">
											<param name="content">./note</param>
											<outputRendition>color:pink; </outputRendition>
										</model>
										<!-\- end dot -\->
										<!-\-<model predicate="not(ends-with(.//note,'.'))" behaviour="inline">
											<param name="content">'.'</param>
										</model>-\->
									</modelSequence>-->
								</modelSequence>
								<!-- case 2 -->
								<modelSequence predicate="@type='book' or @type='manuscript' or @type='thesis' or @type='report'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">monogr/author</param>
									</model>
									<!-- editor -->
									<model behaviour="inline">
										<param name="content">monogr/editor</param>
									</model>
									<!-- other responsabilities -->
									<model behaviour="inline">
										<param name="content">monogr/respStmt</param>
									</model>
									<!-- title  -->
									<model predicate="@type='book' or @type='thesis' or @type='report'" behaviour="inline">
										<param name="content">monogr/title[@level='m']</param>
									</model>
									<model predicate="@type='manuscript'" behaviour="inline">
										<param name="content">monogr/title[@level='u']</param>
										<outputRendition scope="before">content:'“'; </outputRendition>
										<outputRendition scope="after">content:'”'; </outputRendition>
									</model>
									<model behaviour="text">
										<param name="content" value="', '"/>
										
									</model>
									<!-- series  -->
									<model predicate=".//series" behaviour="inline">
										<param name="content" value="series"/>
										
									</model>
									<!-- volume  -->
									<model predicate=".//series/biblScope[@unit='volume']" behaviour="inline">
										<param name="content" value="biblScope[@unit='volume']"/>
									</model>
									<!-- imprint  -->
									<modelSequence predicate="monogr/imprint">
										<model predicate="@type='manuscript'" behaviour="text">
											<param name="content" value="' manuscript '"/>
										</model>
										<model predicate="@type='thesis'" behaviour="text">
											<param name="content" value="' unpublished Ph.D., '"/>
										</model>
										<model behaviour="inline">
											<param name="content" value="monogr/imprint"/>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline">
											<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 2 -->
								<!-- case 3 -->
								<modelSequence predicate="@type='journal'">
									<!-- title journal -->
									<model behaviour="inline">
										<param name="content">monogr/title[@level='j']</param>
									</model>
									<model behaviour="text">
										<param name="content">', '</param>
									</model>
									<!-- imprint  -->
									<modelSequence predicate="monogr/imprint">
										<model behaviour="inline">
											<param name="content">monogr/imprint</param>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline">
											<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 3 -->
								<!-- case 4 -->
								<modelSequence predicate="@type='webpage'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">monogr/author</param>
									</model>
									<!-- title website -->
									<model behaviour="inline">
										<param name="content">monogr/title[not(@type='short')]</param>
									</model>
									<model behaviour="text">
										<param name="content">', '</param>
									</model>
									<!-- url -->
									<modelSequence predicate="monogr/idno[@type='url'] or note[@type='url']">
										<model behaviour="text">
											<param name="content">'retrieved on '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/note[@type='accessed']/date</param>
										</model>
										<model behaviour="text">
											<param name="content">' from &lt;'</param>
										</model>
										<modelGrp>
											<model predicate="monogr/idno[@type='url']" behaviour="inline">
												<param name="content">*/idno</param>
											</model>
											<model predicate="note[@type='url']" behaviour="inline">
												<param name="content">note[@type='url']</param>
											</model>
										</modelGrp>
										<model behaviour="text">
											<param name="content">'&gt;'</param>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline" predicate="note">
												<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 4 -->
							</modelGrp>
						</modelSequence>
						<modelSequence predicate="not(@type='webpage')">
							<model predicate="*/idno[@type='url']" behaviour="inline">
								<param name="content" value="*/idno[@type='url']"/>
							</model>
						</modelSequence>
						<!-- end dot -->
						<model predicate=".//*[position()=last()][not(local-name()='note')][not(ends-with(normalize-space(text()),'.'))]" behaviour="text">
							<param name="content">'.'</param>
						</model>
						<model predicate=".//note[position()=last()][@type='thesisType' or @type='url' or @type='tags']" behaviour="text">
							<param name="content">'.'</param>
						</model>
					</modelSequence>
					</model>
				</elementSpec>

                <!-- FACSIMILE !-->
                <elementSpec mode="change" ident="facsimile">
                    <model predicate="$parameters?modal='true'" behaviour="image-modals">
                    	<param name="images">graphic</param>
                    </model>
					<model behaviour="section-collapsible" cssClass="facsimile">
					    <param name="id">'facsimile'</param>
					    <param name="button-title">'Facsimiles'</param>
					</model>
				</elementSpec>
			    <!-- FIGURE !-->
                <elementSpec mode="change" ident="figure">
                    <model predicate="head" behaviour="figure" cssClass="figure">
                        <param name="title">head/node()</param>
                        <param name="content">*[not(self::head)]</param>
                    </model>
                    <model behaviour="block" cssClass="figure text-center"/>
                </elementSpec>
                <elementSpec mode="change" ident="figDesc">
                    <model behaviour="block" cssClass="text-center">
                        <outputRendition scope="before">content: '[..';</outputRendition>
                        <outputRendition scope="after">content: '..]';</outputRendition>
                        <outputRendition>color: grey;font-style:italic;</outputRendition>
                    </model>
                </elementSpec>
				<!-- FILEDESC !-->
				<elementSpec mode="change" ident="fileDesc">
					<modelSequence predicate="$parameters?header='short'">
						<model behaviour="inline" cssClass="header-short">
							<param name="content" value="sourceDesc/msDesc/msIdentifier/idno"/>
						</model>
						<model behaviour="inline" cssClass="header-short">
							<param name="content" value="titleStmt"/>
						</model>
					</modelSequence>
    				<model behaviour="dl" output="web">
						<modelSequence>
							<modelSequence>
								<model behaviour="dt">
									<param name="content" value="'Support '"/>
								</model>
								<model behaviour="dd">
									<modelSequence>
										<model behaviour="inline">
											<param name="content" value="sourceDesc/msDesc/physDesc/objectDesc/supportDesc/support"/>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
										<model behaviour="inline">
											<param name="content" value="sourceDesc/msDesc/physDesc/decoDesc"/>
										</model>
									</modelSequence>
								</model>
								<model behaviour="dt">
									<param name="content" value="'Text '"/>
								</model>
								<model behaviour="dd">
									<modelSequence>
										<model behaviour="inline">
											<param name="content" value="sourceDesc/msDesc/msContents/msItem/textLang"/>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
										<model behaviour="inline">
											<param name="content" value="sourceDesc/msDesc/physDesc/objectDesc/layoutDesc/layout"/>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
										<model behaviour="inline">
											<param name="content" value="sourceDesc/msDesc/physDesc/handDesc"/>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
									</modelSequence>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin/origDate[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content" value="'Date '"/>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin/origDate[text()[normalize-space(.)]]" behaviour="dd">
									<param name="content" value="sourceDesc/msDesc/history/origin/origDate"/>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin" behaviour="dt">
									<param name="content">'Origin '</param>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin" behaviour="dd">
									<param name="content" value="sourceDesc/msDesc/history/origin/origPlace"/>
								</model>
								<model predicate="sourceDesc/msDesc/history/provenance" behaviour="dt">
									<param name="content" value="'Provenance'"/>
								</model>
								<model predicate="sourceDesc/msDesc/history/provenance" behaviour="dd">
									<param name="content" value="sourceDesc/msDesc/history/provenance"/>
								</model>
								<model predicate="sourceDesc/msDesc/additional//*[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content" value="'Visual Documentation'"/>
								</model>
								<model predicate="sourceDesc/msDesc/additional//*[text()[normalize-space(.)]]" behaviour="dd">
									<param name="content" value="sourceDesc/msDesc/additional"/>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content" value="'Note '"/>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dd">
									<param name="content" value="notesStmt"/>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content">'Note '</param>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dd">
									<param name="content">notesStmt</param>
								</model>
								<model predicate="titleStmt/editor[@role='general'] or titleStmt/editor[@role='contributor']" behaviour="dt">
									<param name="content" value="'Editors '"/>
								</model>
								<model predicate="titleStmt/editor[@role='general'] or titleStmt/editor[@role='contributor']" behaviour="dd">
									<desc>See elementSpec/@ident='editor' for details.</desc>
									<!-- both @role=general and @role=contributor -->
									<modelSequence predicate="titleStmt/editor[@role='general'] and titleStmt/editor[@role='contributor']">
										<model behaviour="inline">
											<param name="content" value="titleStmt/editor[@role='general']"/>
										</model>
										<model behaviour="inline">
											<param name="content" value="' with contributions by '"/>
										</model>
										<model behaviour="inline">
											<param name="content" value="titleStmt/editor[@role='contributor']"/>
										</model>
									</modelSequence>
									<!-- only @role=general -->
									<modelSequence predicate="titleStmt/editor[@role='general'] and not(titleStmt/editor[@role='contributor'])">
										<model behaviour="inline">
											<param name="content" value="titleStmt/editor[@role='general']"/>
										</model>
									</modelSequence>
									<!-- only @role=contributor -->
									<modelSequence predicate="titleStmt/editor[@role='contributor'] and not(titleStmt/editor[@role='general'])">
										<model behaviour="inline">
											<param name="content" value="titleStmt/editor[@role='contributor']"/>
										</model>
									</modelSequence>
								</model>
							</modelSequence>
							<modelSequence predicate="../..//div[@type='bibliography']/p[text()[normalize-space(.)]]">
								<model behaviour="dt">
									<param name="content">'Publication history'</param>
								</model>
								<model behaviour="dd">
									<param name="content">../..//div[@type='bibliography']/p</param>
								</model>
								<desc/>
							</modelSequence>
						</modelSequence>
					</model>
					<model behaviour="title">
						<param name="content" value="titleStmt"/>
					</model>
				</elementSpec>
				<!-- G !-->
				<!-- GEO !-->
				<elementSpec mode="add" ident="geo">
				    <model behaviour="block">app:map</model>
				</elementSpec>
				<!-- GRAPHIC !-->
                <elementSpec mode="change" ident="graphic">
                    <model predicate="ancestor::listPlace" behaviour="graphic">
                        <param name="url">concat("/exist/apps/SAI-data/",@url)</param>
                        <param name="width">@width</param>
                        <param name="height">@height</param>
                        <param name="scale">@scale</param>
                        <param name="title">desc</param>
                    </model>
					<model behaviour="graphic-cust">
						<param name="url">@url</param>
					</model>
				</elementSpec>
				<!-- H !-->
				<elementSpec mode="change" ident="hi">
					<model predicate="@type='italic'" behaviour="inline">
						<outputRendition>font-style: italic;</outputRendition>
					</model>
					<model predicate="@type='bold'" behaviour="inline">
						<outputRendition>font-weight: bold;</outputRendition>
					</model>
				</elementSpec>
				<!-- L !-->
				<elementSpec mode="change" ident="listPlace">
				    <model predicate="@type='subsidiary'" behaviour="section-collapsible">
						<param name="id" value="@type"/>
						<param name="content" value="."/>
						<param name="button-title" value="'Sites located here'"/>
				    </model>
				</elementSpec>
				<!-- P !-->
				<!-- ==== P ==== -->
				<elementSpec mode="change" ident="p">
					<!--<model predicate="@type='editions' or @type='studies'" behaviour="block"/>-->
					<model predicate="@rend='stanza'" behaviour="block">
						<modelSequence>
							<model behaviour="inline" cssClass="stance-number">
								<param name="content" value="concat(@n,'.')"/>
							</model>
							<model behaviour="paragraph">
								<param name="content" value="."/>
							</model>
						</modelSequence>
						<outputRendition> margin-left:2em; </outputRendition>
					</model>
					<model predicate="ancestor::div[@type='translation']" behaviour="block"/>
					<model predicate="parent::surrogates" behaviour="paragraph"/>
					<model predicate="$parameters?headerType='epidoc' and parent::div[@type='bibliography']" behaviour="inline"/>
					<model predicate="parent::support" behaviour="inline"/>
					<model predicate="parent::provenance" behaviour="inline"/>
					<model predicate="ancestor::div[@type='commentary']" behaviour="paragraph"/>
					<model predicate="ancestor::desc" behaviour="paragraph"/>
					<model predicate="$parameters?header='short'" behaviour="omit"/>
					<model predicate="parent::div[@type='bibliography']" behaviour="omit"/>
					<model behaviour="block"/>
				</elementSpec>
				<!-- PERSNAME !-->
                <elementSpec mode="change" ident="persName">
                    <model predicate="ancestor::div[@type]" behaviour="link"/>
                    <model predicate="ancestor::person and @type" behaviour="inline">
                        <outputRendition>opacity:0.8;</outputRendition>
                    </model>
                    <model predicate="ancestor::person" behaviour="inline"/>
 				</elementSpec>
				<!-- PERSON !-->
				<elementSpec mode="change" ident="person">
				    <modelSequence predicate="ancestor::listPerson" behaviour="block">
			            <model behaviour="dl">
			                <modelSequence>
        						<model behaviour="heading">
        							<param name="level">4</param>
        							<param name="content">'Name:'</param>
        						</model>
                                <modelSequence predicate="persName[not(@type)]">
                                    <model behaviour="dt">
                                        <param name="content">'Attested form: '</param>
                                    </model>
                                    <model behaviour="name-orthography"/>
                                </modelSequence>
                                <modelSequence predicate="persName[@type='pra-reconstruction']">
                                    <model behaviour="dt">
                                        <param name="content">'Normalized form: '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content" value="persName[@type='pra-reconstruction']"/>
                                    </model>
                                </modelSequence>
                                <modelSequence predicate="persName[@type='san-reconstruction']">
                                    <model behaviour="dt">
                                        <param name="content">'Sanskrit equivalent: '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content" value="persName[@type='san-reconstruction']"/>
                                    </model>
                                </modelSequence>
                            </modelSequence>
                        </model>
                        <modelSequence predicate="state or trait or residence or occupation" behaviour="block">
                            <model behaviour="dl">
                                <modelSequence>
                                    <model behaviour="heading">
                                        <param name="level">4</param>
                                        <param name="content">'Additional information:'</param>
                                    </model>
                                    <modelSequence predicate="state[@type='political']">
                                        <model behaviour="dt">
                                            <param name="content">'Political roles: '</param>
                                        </model>
                                        <model behaviour="state-or-trait">
                                            <param name="states">state[@type='political']</param>
                                        </model>
                                    </modelSequence>
                                    <modelSequence predicate="state[@type='social']">
                                        <model behaviour="dt">
                                            <param name="content">'Social identifiers: '</param>
                                        </model>
                                        <model behaviour="state-or-trait">
                                            <param name="states">state[@type='social']</param>
                                        </model>
                                    </modelSequence>
                                    <modelSequence predicate="trait[@type='ethnicity']">
                                        <model behaviour="dt">
                                            <param name="content">'Ethnicity: '</param>
                                        </model>
                                        <model behaviour="state-or-trait">
                                            <param name="states">trait[@type='ethnicity']</param>
                                        </model>
                                    </modelSequence>
                                    <modelSequence predicate="trait[@type='gotra']">
                                        <model behaviour="dt">
                                            <param name="content">'Gotra: '</param>
                                        </model>
                                        <model behaviour="state-or-trait">
                                            <param name="states">trait[@type='gotra']</param>
                                        </model>
                                    </modelSequence>
                                    <modelSequence predicate="occupation">
                                        <model behaviour="dt">
                                            <param name="content">'Occupation: '</param>
                                        </model>
                                        <model behaviour="state-or-trait">
                                            <param name="states">occupation</param>
                                        </model>
                                    </modelSequence>
                                </modelSequence>
                            </model>
			            </modelSequence>
			        </modelSequence>
				</elementSpec>
				<!-- PLACE !-->
				<elementSpec mode="add" ident="place">
				    <modelSequence predicate="ancestor::listPlace and not(ancestor::listPlace/ancestor::listPlace)" behaviour="block">
			            <model behaviour="dl">
			                <modelSequence>
                                <modelSequence predicate="placeName[@type='modern']">
                                    <model behaviour="dt">
                                        <param name="content">'Modern names '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content" value="placeName[@type='modern']"/>
                                    </model>
                                </modelSequence>
                                <modelSequence predicate="placeName[@type='ancient']">
                                    <model behaviour="dt">
                                        <param name="content">'Ancient names '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content" value="placeName[@type='ancient']"/>
                                    </model>
                                </modelSequence>
                                <modelSequence predicate="desc">
                                    <model behaviour="dt">
                                        <param name="content">'Description'</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content" value="desc"/>
                                    </model>
                                </modelSequence>
                            </modelSequence>
                        </model>
			        </modelSequence>
			        <modelSequence predicate="ancestor::listPlace" behaviour="block">
			            <model behaviour="heading">
        				    <param name="level">4</param>
        					<param name="content" value="placeName"/>
			            </model>
			            <model behaviour="block">
			                <param name="content" value="desc"/>
			            </model>
			        </modelSequence>
				</elementSpec>
				<!-- PLACENAME !-->
                <elementSpec mode="change" ident="placeName">
                    <model predicate="ancestor::div[@type] or ancestor::origPlace" behaviour="link"/>
                    <model predicate="@xml:lang and @type='modern' and following-sibling::*[1][local-name()='placeName'][@type='modern']" behaviour="name-with-language">
                        <outputRendition scope="after">content:", ";</outputRendition>
                    </model>
                    <model predicate="@xml:lang and @type='modern'" behaviour="name-with-language"/>
                    <model predicate="@xml:lang and @type='ancient' and following-sibling::*[1][local-name()='placeName'][@type='ancient']" behaviour="name-with-language">
                        <outputRendition scope="after">content:", ";</outputRendition>
                    </model>
                    <model predicate="@xml:lang and @type='ancient'" behaviour="name-with-language"/>
				</elementSpec>
				<!-- RDG !-->
				<elementSpec mode="change" ident="rdg">
					<modelSequence predicate="ancestor::listApp">
						<model behaviour="inline">
							<outputRendition>font-style: italic; color:#55b559;</outputRendition>
							<outputRendition scope="after">content: ' ';</outputRendition>
						</model>
						<model predicate="@source and ancestor::listApp" behaviour="refbibl" cssClass="author-initials">
							<param name="link" value="@source"/>
							<outputRendition>font-style:italic; </outputRendition>
							<outputRendition scope="before">content: ' ';</outputRendition>
							<outputRendition scope="after">content: ' ';</outputRendition>
						</model>
					</modelSequence>
				</elementSpec>
				<!-- PTR !-->
				<elementSpec mode="change" ident="ptr">
					<model predicate="parent::bibl and @target" behaviour="make-bibl-link">
						<param name="target" value="@target"/>
					</model>
					<model predicate="not(parent::bibl) and not(text()) and @target[starts-with(.,'#')]" behaviour="resolve-pointer">
						<param name="target" value="substring-after(@target,'#')"/>
					</model>
					<model predicate="not(text())" behaviour="link">
						<param name="content" value="@target"/>
						<param name="uri" value="@target"/>
					</model>
				</elementSpec>

				<!-- ==== title ==== -->
				<elementSpec mode="change" ident="title">
					<model predicate="$parameters?header='short'" behaviour="inline"/>
					<modelSequence predicate="@type='translation' and ancestor::biblStruct">
						<model behaviour="text">
							<param name="content">' '</param>
						</model>
						<modelGrp>
							<!-- you only open the square bracket if the transcription is absent -->
							<model predicate="preceding-sibling::*[1][@type='transcription']" behaviour="text">
								<param name="content">' — '</param>
							</model>
							<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
								<param name="content">'['</param>
							</model>
						</modelGrp>
						<model behaviour="inline"/>
						<model behaviour="text">
							<param name="content">']'</param>
						</model>
					</modelSequence>
					<modelSequence predicate="@type='transcription' and ancestor::biblStruct">
						<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
							<param name="content">' '</param>
						</model>
						<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
							<param name="content">'['</param>
						</model>
						<model behaviour="inline">
							<!-- other way to have some combined property = @level and @type -->
							<modelGrp>
								<model predicate="(@level='a' or @level='s' or @level='u') and ancestor::biblStruct" behaviour="inline">
									<outputRendition>font-style:normal;</outputRendition>
								</model>
								<model predicate="(@level='j' or @level='m') and ancestor::biblStruct" behaviour="inline">
									<outputRendition>font-style:italic;</outputRendition>
								</model>
								<model behaviour="inline">
									<outputRendition>font-style: italic;</outputRendition>
								</model>
							</modelGrp>
						</model>
						<model predicate="not(following-sibling::*[1][@type='translation'])" behaviour="text">
							<param name="content">']'</param>
						</model>
						<model predicate="not(@level) and parent::bibl" behaviour="inline"/>
					</modelSequence>
					<model predicate="@type='short' and ancestor::biblStruct" behaviour="inline" cssClass="vedette">
						<outputRendition>font-style: normal;</outputRendition>
					</model>
					<model predicate="(@level='a' or @level='s' or @level='u') and ancestor::biblStruct" behaviour="inline">
						<outputRendition>font-style:normal;</outputRendition>
					</model>
					<model predicate="(@level='j' or @level='m') and ancestor::biblStruct" behaviour="inline">
						<outputRendition>font-style:italic;</outputRendition>
					</model>
				</elementSpec>
    </schemaSpec>
  </body>
</text>
</TEI>