<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://jenkins.tei-c.org/job/TEIP5/lastSuccessfulBuild/artifact/P5/release/xml/tei/odd/p5.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
<teiHeader>
  <fileDesc>
    <titleStmt>
      <title>ODD for extensions to EIAD-PYU for Sātavāhana Inscriptions</title>
    </titleStmt>
    <publicationStmt>
      <p>Extends hisoma.epigraphy.odd, which contains Emmanuelle Morlock's EIAD-PYU ODD for the project
        "From Vijayapurī to Śrīkṣetra." This document will contain any alternative behaviors
        that we want for the "Sātavāhana Inscriptions" project.</p>
    </publicationStmt>
    <sourceDesc>
      <p>Created by Andrew Ollett</p>
    </sourceDesc>
  </fileDesc>
</teiHeader>
<text>
  <body>
    <schemaSpec start="TEI teiCorpus" source="hisoma-epigraphy.odd" ident="sai-customizations">
				<!-- ==== biblStruct ==== -->
				<elementSpec mode="change" ident="biblStruct">
				    <model behaviour="block">
					<modelSequence>
						<modelSequence>
							<model behaviour="inline">
								<model predicate=".//title[@type='short']" behaviour="bibl-link">
									<param name="content" value=".//title[@type='short']"/>
									<param name="id">@xml:id</param>
									<outputRendition> font-weight:bold; font-style:normal; color: #f6a623; </outputRendition>
									<outputRendition scope="after"> content:"\a"; white-space:pre; </outputRendition>
								</model>
								<modelSequence behaviour="inline">
									<modelGrp>
										<model predicate=".//author/surname" behaviour="inline">
											<param name="content">.//author/surname</param>
										</model>
										<model predicate=".//author/name" behaviour="inline">
											<param name="content">.//author/name</param>
										</model>
									</modelGrp>
									<model behaviour="text">
										<param name="content">' '</param>
									</model>
									<model behaviour="inline">
										<param name="content">monogr/imprint/date</param>
									</model>
								</modelSequence>
								<outputRendition>font-weight:bold;</outputRendition>
							</model>
						</modelSequence>
						<modelSequence behaviour="block">
							<modelGrp>
								<!-- case 1 -->
								<modelSequence predicate="@type='journalArticle' or @type='bookSection' or @type='encyclopediaArticle'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">analytic/author</param>
									</model>
									<!-- title article -->
									<modelGrp>
										<modelSequence predicate="analytic/title[@level='a']">
											<model behaviour="inline">
												<param name="content">analytic/title[@level='a']</param>
												<outputRendition scope="before">content:'“'; </outputRendition>
												<outputRendition scope="after">content:'”'; </outputRendition>
											</model>
											<model behaviour="text">
												<param name="content">', '</param>
											</model>
										</modelSequence>
										<modelSequence predicate="not(analytic/title[@level='a']) and relatedItem[@type='reviewOf']">
											<!--<model behaviour="text">
												<param name="content">'review of '</param>
											</model>-->
											<model behaviour="link">
												<param name="content">relatedItem/ref</param>
												<desc>When it is a review of another bibliographic entry: so there's is no analytic/title[@level='a'].</desc>
											</model>
											<model behaviour="text">
												<param name="content">', '</param>
											</model>
										</modelSequence>
									</modelGrp>
									<!-- if bookSection  or encyclopediaArticle-->
									<modelSequence predicate="@type='bookSection' or @type='encyclopediaArticle'">
										<model predicate="@type='bookSection' or @type='encyclopediaArticle'" behaviour="text">
											<param name="content">'in '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/title[@level='m']</param>
										</model>
										<model behaviour="text">
											<param name="content">', '</param>
										</model>
										<model predicate="monogr/author" behaviour="text">
											<param name="content">'by '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/author</param>
											<!--<outputRendition>color:pink;</outputRendition>-->
										</model>
										<model predicate="monogr/editor" behaviour="inline">
											<param name="content">monogr/editor</param>
											<outputRendition scope="before">content:'ed. by '</outputRendition>
										</model>
										<!--<model predicate="monogr/editor/forename" behaviour="inline">
											<param name="content">monogr/editor/forename</param>
											<outputRendition>color:red;</outputRendition>
										</model>
										<model predicate="monogr/editor/surname" behaviour="inline">
											<param name="content">' '</param>
										</model>
										<model predicate="monogr/editor/surname" behaviour="inline">
											<param name="content">monogr/editor/surname</param>
											
										</model>
										<model predicate="monogr/editor/name" behaviour="inline">
											<param name="content">monogr/editor/name</param>
										</model>
										<model predicate="monogr/editor" behaviour="text">
											<param name="content">', '</param>
										</model>-->
									</modelSequence>
									<!-- if journal article  -->
									<modelSequence predicate="@type='journalArticle'">
										<model behaviour="inline">
											<param name="content">monogr/title[@level='j']</param>
											<!-- <outputRendition>font-style:italic;</outputRendition>-->
										</model>
										<model behaviour="text">
											<param name="content">', '</param>
										</model>
									</modelSequence>
									<!-- series  -->
								<model predicate=".//series" behaviour="inline">
										<param name="content">series</param>
										
										</model>
									<!-- !!! warning !!! biblScope specificity in eiad (follows tei.js) !!!! -->
									<!-- volume  -->
									<!--<model predicate=".//monogr/biblScope[@unit='volume']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='volume']</param>
									</model>-->
									<!-- issue  -->
									<!--<model predicate=".//monogr/biblScope[@unit='issue']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='issue']</param>
									</model>-->
									<!-- imprint  -->
									<model predicate=".//monogr/imprint" behaviour="inline">
										<param name="content">monogr/imprint</param>
										<!--											<outputRendition>color:blue;</outputRendition>-->
									</model>
									<!-- pages  -->
									<!-- see imprint	-->
									<!--<model predicate=".//monogr/imprint/biblScope[@unit='page']" behaviour="inline">
										<param name="content">monogr/imprint/biblScope[@unit='page']</param>
										<outputRendition scope="before">content: ': ';</outputRendition>
										<outputRendition>color:red;</outputRendition>
									</model>-->
									<!-- note  -->
									<!--<modelSequence predicate=".//note">
										<model predicate="./note" behaviour="inline">
											<param name="content">./note</param>
											<outputRendition>color:orange; </outputRendition>
										</model>
										<model predicate=".//imprint/note" behaviour="inline">
											<param name="content">./note</param>
											<outputRendition>color:pink; </outputRendition>
										</model>
										<!-\- end dot -\->
										<!-\-<model predicate="not(ends-with(.//note,'.'))" behaviour="inline">
											<param name="content">'.'</param>
										</model>-\->
									</modelSequence>-->
								</modelSequence>
								<!-- case 2 -->
								<modelSequence predicate="@type='book' or @type='manuscript' or @type='thesis' or @type='report'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">monogr/author</param>
									</model>
									<!-- editor -->
									<model behaviour="inline">
										<param name="content">monogr/editor</param>
									</model>
									<!-- other responsabilities -->
									<model behaviour="inline">
										<param name="content">monogr/respStmt</param>
									</model>
									<!-- title  -->
									<model predicate="@type='book' or @type='thesis' or @type='report'" behaviour="inline">
										<param name="content">monogr/title[@level='m']</param>
									</model>
									<model predicate="@type='manuscript'" behaviour="inline">
										<param name="content">monogr/title[@level='u']</param>
										<outputRendition scope="before">content:'“'; </outputRendition>
										<outputRendition scope="after">content:'”'; </outputRendition>
									</model>
									<model behaviour="text">
										<param name="content" value="', '"/>
										
									</model>
									<!-- series  -->
									<model predicate=".//series" behaviour="inline">
										<param name="content" value="series"/>
										
									</model>
									<!-- volume  -->
									<model predicate=".//series/biblScope[@unit='volume']" behaviour="inline">
										<param name="content" value="biblScope[@unit='volume']"/>
									</model>
									<!-- imprint  -->
									<modelSequence predicate="monogr/imprint">
										<model predicate="@type='manuscript'" behaviour="text">
											<param name="content" value="' manuscript '"/>
										</model>
										<model predicate="@type='thesis'" behaviour="text">
											<param name="content" value="' unpublished Ph.D., '"/>
										</model>
										<model behaviour="inline">
											<param name="content" value="monogr/imprint"/>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline">
											<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 2 -->
								<!-- case 3 -->
								<modelSequence predicate="@type='journal'">
									<!-- title journal -->
									<model behaviour="inline">
										<param name="content">monogr/title[@level='j']</param>
									</model>
									<model behaviour="text">
										<param name="content">', '</param>
									</model>
									<!-- imprint  -->
									<modelSequence predicate="monogr/imprint">
										<model behaviour="inline">
											<param name="content">monogr/imprint</param>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline">
											<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 3 -->
								<!-- case 4 -->
								<modelSequence predicate="@type='webpage'">
									<!-- author -->
									<model behaviour="inline">
										<param name="content">monogr/author</param>
									</model>
									<!-- title website -->
									<model behaviour="inline">
										<param name="content">monogr/title[not(@type='short')]</param>
									</model>
									<model behaviour="text">
										<param name="content">', '</param>
									</model>
									<!-- url -->
									<modelSequence predicate="monogr/idno[@type='url'] or note[@type='url']">
										<model behaviour="text">
											<param name="content">'retrieved on '</param>
										</model>
										<model behaviour="inline">
											<param name="content">monogr/note[@type='accessed']/date</param>
										</model>
										<model behaviour="text">
											<param name="content">' from &lt;'</param>
										</model>
										<modelGrp>
											<model predicate="monogr/idno[@type='url']" behaviour="inline">
												<param name="content">*/idno</param>
											</model>
											<model predicate="note[@type='url']" behaviour="inline">
												<param name="content">note[@type='url']</param>
											</model>
										</modelGrp>
										<model behaviour="text">
											<param name="content">'&gt;'</param>
										</model>
									</modelSequence>
									<!-- note  -->
									<modelSequence predicate="note">
										<model behaviour="inline" predicate="note">
												<param name="content">note</param>
										</model>
									</modelSequence>
								</modelSequence>
								<!-- /end case 4 -->
							</modelGrp>
						</modelSequence>
						<modelSequence predicate="not(@type='webpage')">
							<model predicate="*/idno[@type='url']" behaviour="inline">
								<param name="content" value="*/idno[@type='url']"/>
							</model>
						</modelSequence>
						<!-- end dot -->
						<model predicate=".//*[position()=last()][not(local-name()='note')][not(ends-with(normalize-space(text()),'.'))]" behaviour="text">
							<param name="content">'.'</param>
						</model>
						<model predicate=".//note[position()=last()][@type='thesisType' or @type='url' or @type='tags']" behaviour="text">
							<param name="content">'.'</param>
						</model>
					</modelSequence>
					</model>
				</elementSpec>
    
				<elementSpec mode="change" ident="div">
					<attList>
						<attDef ident="type" mode="replace" usage="req">
							<valList type="closed">
								<valItem ident="apparatus">
									<desc>to contain apparatus criticus or textual notes</desc>
								</valItem>
								<valItem ident="bibliography">
									<desc>to contain bibliographical information, previous publications, etc.</desc>
								</valItem>
								<valItem ident="commentary">
									<desc>to contain all editorial commentary, historical/prosopographical discussion, etc.</desc>
								</valItem>
								<valItem ident="edition">
									<desc>to contain the text of the edition itself; may include multiple text-parts</desc>
								</valItem>
								<valItem ident="textpart">
									<desc>used to divide a div[type=edition] into multiple parts (fragments, columns, faces, etc.)</desc>
								</valItem>
								<valItem ident="translation">
									<desc>to contain a translation of the text into one or more modern languages</desc>
								</valItem>
							</valList>
						</attDef>
					</attList>
					<!-- texpart -->
					<model predicate="@type='textpart'" behaviour="block" cssClass="texpart">
						<modelSequence>
							<model behaviour="block" cssClass="textpart-label">
								<param name="content">concat(upper-case(substring(@n,1,1)),substring(@n,2))</param>
							</model>
							<model behaviour="block"/>
						</modelSequence>
					</model>
					<model predicate="@type='textpart'" behaviour="block" cssClass="textpart"/>
					<!-- bibliography -->
					<modelSequence predicate="@type='bibliography'">
						<model predicate="listBibl" behaviour="heading">
							<param name="level">3</param>
							<param name="content">'Secondary bibliography'</param>
						</model>
						<model behaviour="section" cssClass="bibliography-secondary">
							<param name="content">listBibl</param>
						</model>
					</modelSequence>
					<!-- translation -->
					<modelSequence predicate="@type='translation' and *[text()[normalize-space(.)]]">
						<model behaviour="heading">
							<param name="level">3</param>
							<param name="content"> let $plural := if (count(ab) &gt; 1) then 's' else () return concat(upper-case(substring(@type,1,1)),substring(@type,2),$plural) </param>
						</model>
						<model behaviour="section" cssClass="translation"/>
					</modelSequence>
					<!-- edition -->
					<model predicate="@type='edition'" class="edition" behaviour="section">
						<cssClass>@type</cssClass>
						<outputRendition>padding: 1em 0; </outputRendition>
						<model predicate="div[@type='textpart']" behaviour="block">
							<cssClass>@type</cssClass>
						</model>
						<model behaviour="block" cssClass="diveditionnormal"/>
					</model>
					<!-- apparatus -->
					<modelSequence predicate="@type='apparatus'">
						<model behaviour="separator">
							<param name="content" value="''"/>
							<cssClass>'apparatus-sep'</cssClass>
						</model>
						<model behaviour="section">
							<cssClass>@type</cssClass>
							<outputRendition>padding: 1em 0; </outputRendition>
						</model>
					</modelSequence>
					<!-- commentary -->
					<modelSequence predicate="@type='commentary' and not(p ='' or listApp/* ='')">
						<model behaviour="heading">
							<param name="level">3</param>
							<param name="content">concat(upper-case(substring(@type,1,1)),substring(@type,2))</param>
							<cssClass>@type</cssClass>
						</model>
						<model behaviour="section">
							<cssClass>@type</cssClass>
							<outputRendition>padding: 1em 0; </outputRendition>
						</model>
					</modelSequence>
				</elementSpec>

                <elementSpec mode="change" ident="facsimile">
                    <model predicate="$parameters?modal='true'" behaviour="image-modals">
                    	<param name="images">graphic</param>
                    </model>
					<modelSequence>
					    <model behaviour="heading">
							<param name="level">3</param>
							<param name="content">'Facsimiles '</param>
						</model>
						<model behaviour="images">
							<param name="content">graphic</param>
						</model>
					</modelSequence>
				</elementSpec>
                <elementSpec mode="change" ident="graphic">
					<model behaviour="graphic">
						<param name="url">@url</param>
					</model>
				</elementSpec>
				<elementSpec mode="change" ident="fileDesc">
					<modelSequence predicate="$parameters?header='short'">
						<model behaviour="inline" cssClass="header-short">
							<param name="content" value="sourceDesc/msDesc/msIdentifier/idno"/>
						</model>
						<model behaviour="inline" cssClass="header-short">
							<param name="content" value="titleStmt"/>
						</model>
					</modelSequence>
					<model behaviour="dl" output="web">
						<modelSequence>
							<modelSequence>
								<model behaviour="heading">
									<param name="level">3</param>
									<param name="content">'Metadata '</param>
								</model>
								<model behaviour="dt">
									<param name="content">'Support '</param>
								</model>
								<model behaviour="dd">
									<modelSequence>
										<model behaviour="inline">
											<param name="content">sourceDesc/msDesc/physDesc/objectDesc/supportDesc/support</param>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
										<model behaviour="inline">
											<param name="content">sourceDesc/msDesc/physDesc/decoDesc </param>
										</model>
									</modelSequence>
								</model>
								<model behaviour="dt">
									<param name="content">'Text '</param>
								</model>
								<model behaviour="dd">
									<modelSequence>
										<model behaviour="inline">
											<param name="content">sourceDesc/msDesc/msContents/msItem/textLang</param>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
										<model behaviour="inline">
											<param name="content">sourceDesc/msDesc/physDesc/handDesc</param>
											<outputRendition scope="after">content: ' ';</outputRendition>
										</model>
									</modelSequence>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin/origDate[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content">'Date '</param>
								</model>
								<model predicate="sourceDesc/msDesc/history/origin/origDate[text()[normalize-space(.)]]" behaviour="dd">
									<!--<param name="content">let $finale := if (ends-with(normalize-space(sourceDesc/msDesc/history/origin/origDate),'.')) then () else '. ' return
										concat(sourceDesc/msDesc/history/origin/origDate,$finale)</param>-->
									<param name="content" value="sourceDesc/msDesc/history/origin/origDate"/>
								</model>
								<model behaviour="dt">
									<param name="content">'Origin '</param>
								</model>
								<model behaviour="dd">
									<param name="content">let $finale := if (ends-with(sourceDesc/msDesc/history/origin/origPlace,'.')) then () else '. ' return
										concat(sourceDesc/msDesc/history/origin/origPlace,$finale)</param>
								</model>
								<model behaviour="dt">
									<param name="content">'Provenance'</param>
								</model>
								<model behaviour="dd">
									<param name="content">sourceDesc/msDesc/history/provenance</param>
								</model>
								<model behaviour="dt">
									<param name="content">'Visual Documentation'</param>
								</model>
								<model behaviour="dd">
									<param name="content">sourceDesc/msDesc/additional</param>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dt">
									<param name="content">'Note '</param>
								</model>
								<model predicate="notesStmt/note[text()[normalize-space(.)]]" behaviour="dd">
									<param name="content">notesStmt</param>
								</model>
								<model predicate="titleStmt/editor[@role='general'] or titleStmt/editor[@role='contributor']" behaviour="dt">
									<param name="content">'Editors '</param>
								</model>
								<model predicate="titleStmt/editor[@role='general'] or titleStmt/editor[@role='contributor']" behaviour="dd">
									<desc>See elementSpec/@ident='editor' for details.</desc>
									<!-- both @role=general and @role=contributor -->
									<modelSequence predicate="titleStmt/editor[@role='general'] and titleStmt/editor[@role='contributor']">
										<model behaviour="inline">
											<param name="content">titleStmt/editor[@role='general']</param>
										</model>
										<model behaviour="inline" cssClass="textInline">
											<param name="content" value="', with contributions by '"/>
										</model>
										<model behaviour="inline">
											<param name="content">titleStmt/editor[@role='contributor']</param>
										</model>
										<model behaviour="inline" cssClass="textInline">
											<param name="content" value="'. '"/>
										</model>
									</modelSequence>
									<!-- only @role=general -->
									<modelSequence predicate="titleStmt/editor[@role='general'] and not(titleStmt/editor[@role='contributor'])">
										<model behaviour="inline">
											<param name="content">titleStmt/editor[@role='general']</param>
										</model>
										<model behaviour="inline" cssClass="textInline">
											<param name="content" value="'. '"/>
										</model>
									</modelSequence>
									<!-- only @role=contributor -->
									<modelSequence predicate="titleStmt/editor[@role='contributor'] and not(titleStmt/editor[@role='general'])">
										<model behaviour="inline">
											<param name="content">titleStmt/editor[@role='contributor']</param>
										</model>
									</modelSequence>
									<model behaviour="inline" cssClass="textInline">
										<param name="content" value="'. '"/>
									</model>
								</model>
							</modelSequence>
							<modelSequence predicate="../..//div[@type='bibliography']/p[text()[normalize-space(.)]]">
								<model behaviour="dt">
									<param name="content">'Publication history'</param>
								</model>
								<model behaviour="dd">
									<param name="content">../..//div[@type='bibliography']/p</param>
								</model>
								<desc/>
							</modelSequence>
						</modelSequence>
					</model>
					<model behaviour="title">
						<param name="content" value="titleStmt"/>
					</model>
				</elementSpec>
				<!-- PERSNAME !-->
                <elementSpec mode="change" ident="persName">
                    <model predicate="ancestor::div[@type]" behaviour="link2"/>
                    <model predicate="ancestor::person and @type" behaviour="inline">
                        <outputRendition>opacity:0.8;</outputRendition>
                    </model>
                    <model predicate="ancestor::person" behaviour="inline"/>
 				</elementSpec>
				<!-- PERSON !-->
				<elementSpec mode="change" ident="person">
				    <modelSequence predicate="ancestor::listPerson" behaviour="block">
			            <model behaviour="dl">
			                <modelSequence>
        						<model behaviour="heading">
        							<param name="level">4</param>
        							<param name="content">'Name'</param>
        						</model>
                                <modelSequence predicate="persName[not(@type)]">
                                    <model behaviour="dt">
                                        <param name="content">'Attested form: '</param>
                                    </model>
                                    <model behaviour="name-orthography"/>
                                </modelSequence>
                                <modelSequence predicate="persName[@type='pra-reconstruction']">
                                    <model behaviour="dt">
                                        <param name="content">'Normalized form: '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content">persName[@type='pra-reconstruction']</param>
                                    </model>
                                </modelSequence>
                                <modelSequence predicate="persName[@type='san-reconstruction']">
                                    <model behaviour="dt">
                                        <param name="content">'Sanskrit equivalent: '</param>
                                    </model>
                                    <model behaviour="dd">
                                        <param name="content">persName[@type='san-reconstruction']</param>
                                    </model>
                                </modelSequence>
                            </modelSequence>
                        </model>
                        <model predicate="state or trait" behaviour="dl">
                            <modelSequence predicate="state[@type='political']">
                                <model behaviour="dt">
                                    <param name="content">'Political roles: '</param>
                                </model>
                                <model behaviour="state-or-trait"/>
                            </modelSequence>
			            </model>
			        </modelSequence>
				</elementSpec>
				<!-- PLACENAME !-->
                <elementSpec mode="change" ident="placeName">
                    <model predicate="ancestor::div[@type]" behaviour="link2"/>
				</elementSpec>
				<elementSpec mode="change" ident="rdg">
					<modelSequence predicate="ancestor::listApp">
						<model behaviour="inline">
							<outputRendition>font-style: italic; color:#55b559;</outputRendition>
							<outputRendition scope="after">content: ' ';</outputRendition>
						</model>
						<model predicate="@source and ancestor::listApp" behaviour="refbibl" cssClass="author-initials">
							<param name="link" value="@source"/>
							<outputRendition>font-style:italic; </outputRendition>
							<outputRendition scope="before">content: ' ';</outputRendition>
							<outputRendition scope="after">content: ' ';</outputRendition>
						</model>
					</modelSequence>
				</elementSpec>
				

				<!-- ==== title ==== -->
				<elementSpec mode="change" ident="title">
					<model predicate="$parameters?header='short'" behaviour="inline"/>
					<modelSequence predicate="@type='translation' and ancestor::biblStruct">
						<model behaviour="text">
							<param name="content">' '</param>
						</model>
						<modelGrp>
							<!-- you only open the square bracket if the transcription is absent -->
							<model predicate="preceding-sibling::*[1][@type='transcription']" behaviour="text">
								<param name="content">' — '</param>
							</model>
							<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
								<param name="content">'['</param>
							</model>
						</modelGrp>
						<model behaviour="inline"/>
						<model behaviour="text">
							<param name="content">']'</param>
						</model>
					</modelSequence>
					<modelSequence predicate="@type='transcription' and ancestor::biblStruct">
						<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
							<param name="content">' '</param>
						</model>
						<model predicate="preceding-sibling::*[1][local-name()='title']" behaviour="text">
							<param name="content">'['</param>
						</model>
						<model behaviour="inline">
							<!-- other way to have some combined property = @level and @type -->
							<modelGrp>
								<model predicate="(@level='a' or @level='s' or @level='u') and ancestor::biblStruct" behaviour="inline">
									<outputRendition>font-style:normal;</outputRendition>
								</model>
								<model predicate="(@level='j' or @level='m') and ancestor::biblStruct" behaviour="inline">
									<outputRendition>font-style:italic;</outputRendition>
								</model>
								<model behaviour="inline">
									<outputRendition>font-style: italic;</outputRendition>
								</model>
							</modelGrp>
						</model>
						<model predicate="not(following-sibling::*[1][@type='translation'])" behaviour="text">
							<param name="content">']'</param>
						</model>
						<model predicate="not(@level) and parent::bibl" behaviour="inline"/>
					</modelSequence>
					<model predicate="@type='short' and ancestor::biblStruct" behaviour="inline" cssClass="vedette">
						<outputRendition>font-style: normal;</outputRendition>
					</model>
					<model predicate="(@level='a' or @level='s' or @level='u') and ancestor::biblStruct" behaviour="inline">
						<outputRendition>font-style:normal;</outputRendition>
					</model>
					<model predicate="(@level='j' or @level='m') and ancestor::biblStruct" behaviour="inline">
						<outputRendition>font-style:italic;</outputRendition>
					</model>
				</elementSpec>
    </schemaSpec>
  </body>
</text>
</TEI>